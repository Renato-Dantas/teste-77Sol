{"version":3,"sources":["api/api.js","assets/logo.svg","assets/wave.svg","components/TelaInicial.jsx","assets/dollar.svg","assets/team.svg","assets/sun.svg","components/BoxCard.jsx","components/OpcoesParcelas.jsx","components/TelaRequest.jsx","App.js","index.js"],"names":["a","telhado","valorConta","cep","fetch","response","json","data","alert","Api","globalColor","options","value","label","TelaInicial","loadData","handleChangeInput","isInpError","handleChangeOption","handleChangeSlide","setCep","cepInput","document","querySelector","zipCode","addEventListener","length","substr","Box","component","className","noValidate","autoComplete","TextField","id","variant","onChange","type","error","select","defaultValue","map","option","MenuItem","sx","color","width","m","Slider","aria-label","valueLabelDisplay","min","max","Button","onClick","backgroundColor","BoxCard","texto","img","altImg","h","height","src","alt","Typography","fontFamily","OpcoesParcelas","i","TelaRequest","parcelas","from","opacity","to","config","delay","props","style","mb","textAlign","fontWeight","textShadow","parcela","valor_minimo","toFixed","valor_maximo","integradores_regiao","team","dollar","economia","sun","irradiancia","href","target","App","useState","setData","setParcelas","setTelhado","setValorConta","setIsInpError","then","screenCalc","getElementsByClassName","screenForm","parcelamento","display","useEffect","wave","logo","mt","event","ReactDOM","render","StrictMode","getElementById"],"mappings":"uRAAA,qCAAAA,EAAA,6DAAoBC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,WAAYC,EAAzC,EAAyCA,IAAzC,kBAE+BC,MAAM,gDAAD,OAAiDH,EAAjD,wBAAwEC,EAAxE,gBAA0FC,IAF9H,cAEcE,EAFd,gBAG2BA,EAASC,OAHpC,cAGcC,EAHd,yBAIeA,GAJf,kCAMQC,MAAM,yBANd,2D,sBAUeC,M,4CCVA,MAA0B,iCCA1B,MAA0B,iC,6DCMnCC,EAAc,UACdC,EAAU,CACd,CACEC,MAAO,uBACPC,MAAO,wBAET,CACED,MAAO,wBACPC,MAAO,yBAET,CACED,MAAO,WACPC,MAAO,eAET,CACED,MAAO,WACPC,MAAO,eAET,CACED,MAAO,OACPC,MAAO,QAET,CACED,MAAO,OACPC,MAAO,SAqFIC,EAhFK,SAAC,GAQd,IAPLC,EAOI,EAPJA,SACAC,EAMI,EANJA,kBACAC,EAKI,EALJA,WACAhB,EAII,EAJJA,QACAiB,EAGI,EAHJA,mBACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,OAIMC,EAAWC,SAASC,cAAc,YACpCC,EAAU,GASd,OARQ,OAARH,QAAQ,IAARA,KAAUI,iBAAiB,SAAS,YAClCD,EAAUH,EAAST,QAEM,IAAnBY,EAAQE,SACVL,EAAST,MAAT,UAAoBY,EAAQG,OAAO,EAAG,GAAtC,cAA8CH,EAAQG,OAAO,EAAG,IAChEP,EAAOC,EAAST,WAIpB,eAACgB,EAAA,EAAD,CAAKC,UAAU,OAAOC,UAAU,WAAWC,YAAU,EAACC,aAAa,MAAnE,UAGE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHrB,MAAM,MACNsB,QAAQ,WACRC,SAAUpB,EACVqB,KAAK,OACLP,UAAU,UACVQ,MAAOrB,IAIT,cAACgB,EAAA,EAAD,CACEC,GAAG,2BACHK,QAAM,EACN1B,MAAM,eACND,MAAOX,EACPuC,aAAa,GACbJ,SAAUlB,EACVY,UAAU,UACVQ,MAAOrB,EART,SAUGN,EAAQ8B,KAAI,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,CAEE/B,MAAO8B,EAAO9B,MACdgC,GAAI,CAAEC,MAAOnC,GAHf,SAKGgC,EAAO7B,OAJH6B,EAAO9B,YAUlB,cAACgB,EAAA,EAAD,CAAKkB,MAAO,IAAKF,GAAI,CAAEG,EAAG,cAA1B,SACE,cAACC,EAAA,EAAD,CACEC,aAAW,UACXC,kBAAkB,KAClBC,IAAK,IACLC,IAAK,IACLhB,SAAUjB,EACVyB,GAAI,CAAEC,MAAO,eAIjB,cAACQ,EAAA,EAAD,CACElB,QAAQ,YACRmB,QAASvC,EACT6B,GAAI,CAAEW,gBAAiB7C,GAHzB,0BCxGS,MAA0B,mCCA1B,MAA0B,iCCA1B,MAA0B,gCCc1B8C,EAXC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,EACrC,OACE,eAAChC,EAAA,EAAD,CAAKE,UAAU,OAAO+B,OAAQD,EAA9B,UACE,qBAAK9B,UAAU,WAAWgC,IAAKJ,EAAKK,IAAKJ,IACzC,cAACK,EAAA,EAAD,CAAY7B,QAAQ,KAAK8B,WAAW,cAApC,SACGR,QCKMS,EAVQ,SAAC,GAAa,IAAZT,EAAW,EAAXA,MACrB,OACI,cAAC7B,EAAA,EAAD,CAAKE,UAAU,QAAf,SACA,cAACkC,EAAA,EAAD,CAAYlC,UAAU,cAAtB,SACG2B,O,QCGL/C,EAAc,UAChByD,EAAI,EAwFOC,EAtFK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAU9D,EAAW,EAAXA,KAC/B,OACE,cAAC,SAAD,CAAQ+D,KAAM,CAAEC,QAAS,GAAKC,GAAI,CAAED,QAAS,GAAKE,OAAQ,CAAEC,MAAO,KAAnE,SACG,SAACC,GAAD,OACC,qBAAKC,MAAOD,EAAZ,SAEE,eAAC/C,EAAA,EAAD,CAAKE,UAAU,cAAf,UAEE,eAACF,EAAA,EAAD,WACE,cAACoC,EAAA,EAAD,CACE7B,QAAQ,KACR8B,WAAW,cACXrB,GAAI,CACFC,MAAOnC,EACPmE,GAAI,OACJC,UAAW,SACXC,WAAY,OACZC,WAAY,iCARhB,0BAaA,cAAChB,EAAA,EAAD,CACE7B,QAAQ,KACR8B,WAAW,cACXrB,GAAI,CAAEC,MAAOnC,EAAamE,GAAI,QAHhC,wDAdF,OAqBGR,QArBH,IAqBGA,OArBH,EAqBGA,EAAU5B,KAAI,SAACwC,GAAD,OACb,cAAC,EAAD,CAEExB,MAAK,UACHwB,EAAQZ,SADL,mBAEMY,EAAQC,aAAaC,QAAQ,GAFnC,kCAGLF,EAAQG,aAAaD,QAAQ,KAJxBhB,WAUX,eAACvC,EAAA,EAAD,CAAKE,UAAU,WAAf,UAEE,cAAC,EAAD,CACE2B,MAAK,uBAAWlD,QAAX,IAAWA,OAAX,EAAWA,EAAM8E,oBAAjB,wDAEL3B,IAAK4B,EACL3B,OAAQ,aAIV,cAAC,EAAD,CACED,IAAK6B,EACL5B,OAAQ,aACRF,MAAK,8GACc,OAAJlD,QAAI,IAAJA,OAAA,EAAAA,EAAMiF,UAAW,MAD3B,KAEL5B,EAAE,UAIJ,cAAC,EAAD,CACEF,IAAK+B,EACL9B,OAAO,UACPF,MAAK,oFAED,OAAJlD,QAAI,IAAJA,OAAA,EAAAA,EAAMmF,aAAc,IAFf,sEAOT,mBACEC,KAAK,0CACLC,OAAO,SACP9D,UAAU,OAHZ,SAKE,cAACuB,EAAA,EAAD,CAAQlB,QAAQ,YAAYL,UAAU,cAAtC,8CCFC+D,MA7Ef,WAAgB,IAAD,EAEWC,qBAFX,mBAENvF,EAFM,KAEAwF,EAFA,OAImBD,qBAJnB,mBAINzB,EAJM,KAII2B,EAJJ,OAMiBF,mBAAS,IAN1B,mBAMN7F,EANM,KAMGgG,EANH,OAQSH,qBART,mBAQN3F,EARM,KAQDiB,EARC,OAUuB0E,mBAAS,KAVhC,mBAUN5F,EAVM,KAUMgG,EAVN,OAYuBJ,oBAAS,GAZhC,mBAYN7E,EAZM,KAYMkF,EAZN,iDAgCb,sBAAAnG,EAAA,sDACES,EAAI,CAAER,UAASC,aAAYC,QAAOiG,MAAK,SAAC7F,GACtCwF,EAAQxF,GAER,IAAI8F,EAAa/E,SAASgF,uBAAuB,eAC7CC,EAAajF,SAASgF,uBAAuB,aAEjD,OAAI/F,QAAJ,IAAIA,OAAJ,EAAIA,EAAMiG,eACRH,EAAW,GAAGzB,MAAML,QAAU,IAC9BgC,EAAW,GAAG3B,MAAM6B,QAAU,SAE9BN,GAAc,GACd3F,MAAM,8CAZZ,4CAhCa,sBAiDb,OArBAkG,qBAAU,WACRV,EAAW,OAACzF,QAAD,IAACA,OAAD,EAACA,EAAMiG,gBACjB,CAACjG,IAoBF,sBAAKuB,UAAU,kBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKgC,IAAK6C,EAAM5C,IAAI,SACpB,qBAAK7B,GAAG,OAAO4B,IAAK8C,EAAM7C,IAAI,SAC9B,cAACC,EAAA,EAAD,CACE7B,QAAQ,KACRN,UAAU,KACVC,UAAU,aACVc,GAAI,CAAEiC,GAAI,OAAQgC,GAAI,MAAO5C,WAAY,cAJ3C,gCASF,cAAC,EAAD,CACElD,SAhEO,2CAiEPC,kBA/CoB,SAAC8F,GACzB,IAAIlG,EAAQkG,EAAMlB,OAAOhF,MACzBQ,EAAOR,IA8CHK,WAAYA,EACZhB,QAASA,EACTiB,mBAtDqB,SAAC4F,GAC1Bb,EAAWa,EAAMlB,OAAOhF,QAsDpBO,kBA9CoB,SAAC2F,GACzB,IAAIlG,EAAQkG,EAAMlB,OAAOhF,MACzBsF,EAActF,IA6CVQ,OAAQA,IAEV,cAAC,EAAD,CAAaiD,SAAUA,EAAU9D,KAAMA,EAAMwF,QAASA,EAAS3E,OAAQA,EAAQ6E,WAAYA,QC5EjGc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3F,SAAS4F,eAAe,W","file":"static/js/main.25261ee9.chunk.js","sourcesContent":["async function Api({telhado, valorConta, cep}){\r\n    try{\r\n        const response = await fetch(`https://api.77sol.com.br/busca-cep?estrutura=${telhado}&valor_conta=${valorConta}&cep=${cep}`)\r\n        const data = await response.json();\r\n        return data;\r\n    }catch(error){\r\n        alert(\"CEP NÃO ENCONTRADO\")\r\n    }\r\n} \r\n\r\nexport default Api;","export default __webpack_public_path__ + \"static/media/logo.29781269.svg\";","export default __webpack_public_path__ + \"static/media/wave.e6bf1d3b.svg\";","import TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst globalColor = \"#1335C6\";\r\nconst options = [\r\n  {\r\n    value: \"fibrocimento-madeira\",\r\n    label: \"Fibrocimento-madeira\",\r\n  },\r\n  {\r\n    value: \"fibrocimento-metalico\",\r\n    label: \"Fibrocimento-metalico\",\r\n  },\r\n  {\r\n    value: \"ceramico\",\r\n    label: \"Cerâmico\",\r\n  },\r\n  {\r\n    value: \"metalico\",\r\n    label: \"Metálico\",\r\n  },\r\n  {\r\n    value: \"laje\",\r\n    label: \"Laje\",\r\n  },\r\n  {\r\n    value: \"solo\",\r\n    label: \"Solo\",\r\n  },\r\n];\r\n\r\n\r\nconst TelaInicial = ({\r\n  loadData,\r\n  handleChangeInput,\r\n  isInpError,\r\n  telhado,\r\n  handleChangeOption,\r\n  handleChangeSlide,\r\n  setCep\r\n}) => {\r\n  \r\n  //Tratamento da mascará de CEP\r\n  const cepInput = document.querySelector(\".inp-cep\");\r\n  var zipCode = \"\";\r\n  cepInput?.addEventListener(\"keyup\", () => {\r\n    zipCode = cepInput.value;\r\n    if (zipCode)\r\n      if (zipCode.length === 8) {\r\n        cepInput.value = `${zipCode.substr(0, 5)} - ${zipCode.substr(5, 9)}`;\r\n        setCep(cepInput.value);\r\n      }\r\n  });\r\n  return (\r\n    <Box component=\"form\" className=\"box-form\" noValidate autoComplete=\"off\">\r\n\r\n      {/* INPUT PARA USUARIO COLOCAR O CEP */}\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label=\"CEP\"\r\n        variant=\"outlined\"\r\n        onChange={handleChangeInput}\r\n        type=\"text\"\r\n        className=\"inp-cep\"\r\n        error={isInpError}\r\n      />\r\n\r\n      {/* SELETOR DE ESTRUTURA */}\r\n      <TextField\r\n        id=\"outlined-select-currency\"\r\n        select\r\n        label=\"Tipo Telhado\"\r\n        value={telhado}\r\n        defaultValue=\"\"\r\n        onChange={handleChangeOption}\r\n        className=\"inp-box\"\r\n        error={isInpError}\r\n      >\r\n        {options.map((option) => (\r\n          <MenuItem\r\n            key={option.value}\r\n            value={option.value}\r\n            sx={{ color: globalColor }}\r\n          >\r\n            {option.label}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n\r\n      {/* SLIDER PARA ESCOLHER O VALOR DA CONTA */}\r\n      <Box width={300} sx={{ m: \"30px  auto\" }}>\r\n        <Slider\r\n          aria-label=\"Default\"\r\n          valueLabelDisplay=\"on\"\r\n          min={100}\r\n          max={10000}\r\n          onChange={handleChangeSlide}\r\n          sx={{ color: \"#1335C6\" }}\r\n        />\r\n      </Box>\r\n      {/* BOTÃO ENVIAR DADOS */}\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={loadData}\r\n        sx={{ backgroundColor: globalColor }}\r\n      >\r\n        Calcular\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TelaInicial;\r\n","export default __webpack_public_path__ + \"static/media/dollar.294bca94.svg\";","export default __webpack_public_path__ + \"static/media/team.3c5feefb.svg\";","export default __webpack_public_path__ + \"static/media/sun.0564cab3.svg\";","import { Typography } from \"@material-ui/core\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst BoxCard = ({ texto, img, altImg, h}) => {\r\n  return (\r\n    <Box className=\"card\" height={h}>\r\n      <img className=\"card-img\" src={img} alt={altImg} />\r\n      <Typography variant=\"h6\" fontFamily=\"Roboto Mono\">\r\n        {texto}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BoxCard;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst OpcoesParcelas = ({texto}) => {\r\n    return ( \r\n        <Box className=\"itens\">\r\n        <Typography className=\"global-font\">\r\n          {texto}\r\n        </Typography>\r\n      </Box>\r\n     );\r\n}\r\n \r\nexport default OpcoesParcelas;","import dollar from \"../assets/dollar.svg\";\r\nimport team from \"../assets/team.svg\";\r\nimport sun from \"../assets/sun.svg\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport BoxCard from \"./BoxCard\";\r\nimport OpcoesParcelas from \"./OpcoesParcelas\";\r\nimport { Spring } from \"react-spring\";\r\n\r\nconst globalColor = \"#1335C6\";\r\nvar i = 0;\r\n\r\nconst TelaRequest = ({ parcelas, data }) => {\r\n  return (\r\n    <Spring from={{ opacity: 0 }} to={{ opacity: 1 }} config={{ delay: 1000 }}>\r\n      {(props) => (\r\n        <div style={props}>\r\n          {/* BOX de RESPOSTAS A REQUEST */}\r\n          <Box className=\"box-request\">\r\n            {/* OPÇÕES DE PARCELAS */}\r\n            <Box>\r\n              <Typography\r\n                variant=\"h3\"\r\n                fontFamily=\"Roboto Mono\"\r\n                sx={{\r\n                  color: globalColor,\r\n                  mb: \"20px\",\r\n                  textAlign: \"center\",\r\n                  fontWeight: \"bold\",\r\n                  textShadow: \"2px 2px 5px rgba(0, 0, 0, .3)\",\r\n                }}\r\n              >\r\n                INVESTIMENTO\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                fontFamily=\"Roboto Mono\"\r\n                sx={{ color: globalColor, mb: \"15px\" }}\r\n              >\r\n                Diversos planos para realizar seu projeto:\r\n              </Typography>\r\n              {parcelas?.map((parcela) => (\r\n                <OpcoesParcelas\r\n                  key={i++}\r\n                  texto={`${\r\n                    parcela.parcelas\r\n                  }x de R$ ${parcela.valor_minimo.toFixed(2)} a R$\r\n                ${parcela.valor_maximo.toFixed(2)}`}\r\n                />\r\n              ))}\r\n            </Box>\r\n\r\n            {/* Box CARDS */}\r\n            <Box className=\"card-box\">\r\n              {/* BOX EMPRESAS PARCEIRAS NO LOCAL */}\r\n              <BoxCard\r\n                texto={`Temos ${data?.integradores_regiao} empresas parceiras na sua\r\n              região!`}\r\n                img={team}\r\n                altImg={\"team ico\"}\r\n              />\r\n\r\n              {/* Box ECONOMIA */}\r\n              <BoxCard\r\n                img={dollar}\r\n                altImg={\"dollar ico\"}\r\n                texto={`Considerando o tempo de garantia do equipamento, você terá uma\r\n              economia de R$ ${data?.economia + \",00\"}!`}\r\n                h=\"400px\"\r\n              />\r\n\r\n              {/* BOX POTENCIAL ECOLOGICO */}\r\n              <BoxCard\r\n                img={sun}\r\n                altImg=\"sun ico\"\r\n                texto={`O Potêncial de irradiância da sua região é de\r\n              ${\r\n                data?.irradiancia / 1000\r\n              }kWh/m². O Maior potêncial no Brasil é de 6kwh/m²!`}\r\n              />\r\n            </Box>\r\n            {/* BOTÃO ENVIAR DADOS */}\r\n            <a\r\n              href=\"https://www.77sol.com.br/financiamentos\"\r\n              target=\"_blank\"\r\n              className=\"link\"\r\n            >\r\n              <Button variant=\"contained\" className=\"btn-consult\">\r\n                Faça uma consulta!\r\n              </Button>\r\n            </a>\r\n          </Box>\r\n        </div>\r\n      )}\r\n    </Spring>\r\n  );\r\n};\r\n\r\nexport default TelaRequest;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Api from \"./api/api\";\r\nimport logo from \"./assets/logo.svg\";\r\nimport wave from \"./assets/wave.svg\";\r\nimport \"./styles/style.css\";\r\nimport TelaInical from \"./components/TelaInicial\";\r\nimport TelaRequest from \"./components/TelaRequest\";\r\n\r\nfunction App() {\r\n\r\n  const [data, setData] = useState();\r\n\r\n  const [parcelas, setParcelas] = useState();\r\n\r\n  const [telhado, setTelhado] = useState(\"\");\r\n\r\n  const [cep, setCep] = useState();\r\n\r\n  const [valorConta, setValorConta] = useState(100);\r\n\r\n  const [isInpError, setIsInpError] = useState(false);\r\n\r\n  const handleChangeOption = (event) => {\r\n    setTelhado(event.target.value);\r\n  };\r\n\r\n  const handleChangeInput = (event) => {\r\n    let value = event.target.value;\r\n    setCep(value);\r\n  };\r\n\r\n  const handleChangeSlide = (event) => {\r\n    let value = event.target.value;\r\n    setValorConta(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setParcelas(data?.parcelamento);\r\n  }, [data]);\r\n\r\n  async function loadData() {\r\n    Api({ telhado, valorConta, cep }).then((data) => {\r\n      setData(data);\r\n\r\n      var screenCalc = document.getElementsByClassName(\"box-request\");\r\n      var screenForm = document.getElementsByClassName(\"box-form\");\r\n\r\n      if (data?.parcelamento) {\r\n        screenCalc[0].style.opacity = \"1\";\r\n        screenForm[0].style.display = \"none\";\r\n      }else {\r\n        setIsInpError(true);\r\n        alert(\"Preencha corretamente todos os campos!\");\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-geral\">\r\n      <div className='container-logo'>\r\n        <img src={wave} alt=\"wave\" />\r\n        <img id=\"logo\" src={logo} alt=\"logo\" />\r\n        <Typography\r\n          variant=\"h2\"\r\n          component=\"h1\"\r\n          className=\"title-logo\"\r\n          sx={{ mb: \"30px\", mt: \"5px\", fontFamily: \"Zilla Slab\" }}\r\n        >\r\n          SIMULADOR SOLAR\r\n        </Typography>\r\n      </div>\r\n      <TelaInical\r\n        loadData={loadData}\r\n        handleChangeInput={handleChangeInput}\r\n        isInpError={isInpError}\r\n        telhado={telhado}\r\n        handleChangeOption={handleChangeOption}\r\n        handleChangeSlide={handleChangeSlide}\r\n        setCep={setCep}\r\n      />\r\n      <TelaRequest parcelas={parcelas} data={data} setData={setData} setCep={setCep} setTelhado={setTelhado}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}